@page "/"
@inject IWorkerFactory workerFactory

<PageTitle>Exp3</PageTitle>

@if (_banditAlgorithm is null)
{
    <text>
        Please configure the experiments for your liking.
    </text>
    <br />
    <br />
    <label for="k">k (arms):</label>
    <input id="k" @bind-value="_k" type="number" style="width:100px;" />
    <br />
    <label for="gamma">gamma:</label>
    <input id="gamma" @bind-value="_gamma" type="number" style="width:100px;" step="any" />
    <br />
    <label for="dataset">dataset:</label>
    <select class="form-control selectpicker" @bind="_chosenDataset">
        <option>--select--</option>
        @foreach (var item in _datasets)
        {
            <option value="@item.id">@item.name</option>
        }
    </select>
    <br />
    <br />
    <button class="btn btn-primary" @onclick=Initialize>Initialize Weights</button>
}
else
{
    <text>
        The following is a setup with @(_dataSet is StaticDataSet ? "Static Dataset" : "Mod2 Experiment that alternates every 1000 rounds") where Exp3 (k=@_k, gamma=@_gamma) then tries to exploit the actions that gives the best rewards while still exploring all to see if some change to be better over time.
    </text>
    <br />
    <br />
    <div class="row">
        <div class="col col-md-4">
            <button class="btn btn-primary" @onclick=Iterate>Make One Iteration</button>
            <br />
            <br />
            @if (_iterating)
            {
                <button class="btn btn-warning" @onclick="() => _iterating = false">Stop Iterating</button>
            }
            else
            {
                <button class="btn btn-success" @onclick=KeepIterating>Keep Iterating</button>
            }
            <label for="delay">&nbsp; render delay (ms):</label>
            <input id="delay" @bind-value="_delay" type="number" style="width:100px;" step="any" />
            <br />
            <br />
            @if (_showWeakRegretPlot)
            {
                <button class="btn text-light" style="background-color:blue;" @onclick="() => {_showWeakRegretPlot = false; StateHasChanged();}">Hide Weak Regret Plot</button>
            }
            else
            {
                <button class="btn text-light" style="background-color:blue;" @onclick="() => {_showWeakRegretPlot = true; StateHasChanged();}">Show Weak Regret Plot</button>
            }
            @if (_showStrongRegretPlot)
            {
                <button class="btn text-light px-2" style="background-color:green;" @onclick="() => {_showStrongRegretPlot = false; StateHasChanged();}">Hide Strong Regret Plot</button>
            }
            else
            {
                <button class="btn text-light px-2" style="background-color:green;" @onclick="() => {_showStrongRegretPlot = true; StateHasChanged();}">Show Strong Regret Plot</button>
            }
            <br />
            <br />
            <b>Iterations:</b> @_iterations
            <br />
            <b>Weak Regret:</b> @string.Format("{0:0.000}", _weakRegretHistory.Count > 0 ? _weakRegretHistory.Last() : 0)
            <br />
            <b>Strong Regret:</b> @string.Format("{0:0.000}", _strongRegretHistory.Count > 0 ? _strongRegretHistory.Last() : 0)
            <br />
            <b>Average Weak Regret pr. Iteration:</b> @string.Format("{0:0.000}",  (_weakRegretHistory.Count > 0 ? _weakRegretHistory.Last() : 0)/_iterations)
            <br />
            <b>Average Strong Regret pr. Iteration:</b> @string.Format("{0:0.000}", (_strongRegretHistory.Count > 0 ? _strongRegretHistory.Last() : 0)/_iterations)
        
        </div>
        <div class="col col-md-4">
            @if (_showWeakRegretPlot)
            {
                <svg width="300" height="300">
                    <path stroke="blue"
                  stroke-width="1"
                  fill="none"
                  d="@_weakRegretPathData">

                    </path>
                </svg>
            }
        </div>
        <div class="col col-md-4">
            @if (_showStrongRegretPlot)
            {
                <svg width="300" height="300">
                    <path stroke="green"
                  stroke-width="1"
                  fill="none"
                  d="@_strongRegretPathData">

                    </path>
                </svg>
            }
        </div>
    </div>
    <br />
    <br />
    <h2>Rewards</h2>
    <table width="100%">
        <tr>
            @for (int i = 0; i < _dataSet.NormalizedRewards.Count(); i++)
            {
                int j = i;
                <td style="border:1px solid black;" width="auto">
                    <input @bind-value=_dataSet.NormalizedRewards[j] style="width:100%;" />
                </td>
            }
        </tr>
    </table>

    <h2>Internal Weights of Exp3</h2>
    <svg width="100vw" height="300">
        @for (int i = 0; i < _banditAlgorithm.K; i++)
        {
            <rect x="@(((i * 3 + 1) * 100.0 / (_banditAlgorithm.K * 3)).AsString())vw"
          y="0"
          width="@((100.0 / (_banditAlgorithm.K * 3)).AsString())vw"
          height="@((300.0 * _banditAlgorithm.Weights[i] / _banditAlgorithm.Weights.Max()).AsString())"
          fill="red">
            </rect>
            <text>
                <text x="5"
              y="-@(((i * 3 + 1) * 100.0 / (_banditAlgorithm.K * 3)).AsString())vw"
              fill="black"
              text-anchor="start"
              transform="rotate(90)">
                    @Math.Round(_banditAlgorithm.Weights[i], 7)
                </text>
            </text>
        }
    </svg>
    <br />
    <br />
}

@code {
    private int _k = 10;
    private double _gamma = 0.1;
    private int _chosenDataset = 0;

    private List<(string name, int id)> _datasets = new()
    {
        ("Static Dataset", 0),
        ("Mod2 for 1000 rounds Dataset", 1),
    };

    private IBanditAlgorithm _banditAlgorithm;
    private IDataSet _dataSet;

    private bool _iterating;
    private int _iterations;

    private double _delay = 1;
    private double _accumDelay = 0;

    private List<double> _weakRegretHistory = new();
    private List<double> _strongRegretHistory = new();
    private bool _showWeakRegretPlot = true;
    private bool _showStrongRegretPlot = true;
    private IWorkerBackgroundService<RegretLineCalculator> _service;
    private string _weakRegretPathData = "";
    private string _strongRegretPathData = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create worker.
            var worker = await workerFactory.CreateAsync();

            // Create service reference. For most scenarios, it's safe (and best) to keep this
            // reference around somewhere to avoid the startup cost.
            _service = await worker.CreateBackgroundServiceAsync<RegretLineCalculator>();

            await KeepShowingRegretPlot();
        }
    }

    private void Initialize()
    {
        _banditAlgorithm = new Exp3(_k, _gamma);
        _dataSet = _chosenDataset switch
        {
            0 => new StaticDataSet(Enumerable.Range(0, _k).Select(_ => Random.Shared.NextDouble()).OrderBy(x => x).ToArray()),
            _ => new Mod2DataSet(_k)
        };
    }

    private async Task Iterate()
    {
        var action = _banditAlgorithm.Choose();
        var (reward, weakRegret, strongRegret) = _dataSet.Choose(action);
        _banditAlgorithm.GiveReward(action, reward);
        _weakRegretHistory.Add(weakRegret);
        _strongRegretHistory.Add(strongRegret);
        _iterations++;
        StateHasChanged();
    }

    private async Task KeepIterating()
    {
        await Task.Run(async () =>
        {
            _iterating = true;
            while (_iterating)
            {
                if (_delay <= 0) _delay = 1;
                _accumDelay += _delay;
                if (_accumDelay >= 1)
                {
                    await Task.Delay((int)_accumDelay);
                    _accumDelay = _accumDelay % 1;
                }
                await Iterate();
            }
        });
    }

    private async Task KeepShowingRegretPlot()
    {
        _weakRegretPathData = "";
        await Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(10);
                if (_showWeakRegretPlot)
                {
                    var localParameter = _weakRegretHistory.ToArray();
                    _weakRegretPathData = await _service.RunAsync(s => s.RegretLine(localParameter));
                }
                if (_showStrongRegretPlot)
                {
                    var localParameter = _strongRegretHistory.ToArray();
                    _strongRegretPathData = await _service.RunAsync(s => s.RegretLine(localParameter));
                }
            }
        });
    }
}