@page "/"

<PageTitle>Exp3</PageTitle>

@if (_banditAlgorithm is null)
{
    <text>
        Please configure the experiments for your liking.
    </text>
    <br />
    <br />
    <label for="k">k (arms):</label>
    <input id="k" @bind-value="_k" type="number" style="width:100px;" />
    <br />
    <label for="gamma">gamma:</label>
    <input id="gamma" @bind-value="_gamma" type="number" style="width:100px;" step="any" />
    <br />
    <label for="dataset">dataset:</label>
    <select class="form-control selectpicker" @bind="_chosenDataset">
        <option>--select--</option>
        @foreach (var item in _datasets)
        {
            <option value="@item.id">@item.name</option>
        }
    </select>
    <br />
    <br />
    <button class="btn btn-primary" @onclick=Initialize>Initialize Weights</button>
}
else
{
    <text>
        The following is a setup with @(_dataSet is StaticDataSet ? "Static Dataset" : "Mod2 Experiment that alternates every 1000 rounds") where Exp3 (k=@_k, gamma=@_gamma) then tries to exploit the actions that gives the best rewards while still exploring all to see if some change to be better over time.
    </text>
    <br />
    <br />
    <div class="row">
        <div class="col col-sm-6">
            <button class="btn btn-primary" @onclick=Iterate>Make One Iteration</button>
            <br />
            <br />
            @if (_iterating)
            {
                <button class="btn btn-primary" @onclick="() => _iterating = false">Stop Iterating</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick=KeepIterating>Keep Iterating</button>
            }
            <label for="delay">&nbsp;delay (ms):</label>
            <input id="delay" @bind-value="_delay" type="number" style="width:100px;" step="any" />
            <br />
            <br />
            <b>Iterations:</b> @_iterations
            <br />
            <b>Accumulative Regret:</b> @string.Format("{0:0.000}", _accumRegret)
            <br />
            <b>Average Regret pr. Iteration:</b> @string.Format("{0:0.000}", _accumRegret/_iterations)
        </div>
        <div class="col col-sm-6">
            <svg width="300" height="200">
                <path stroke="red"
                    stroke-width="2"
                    fill="none"
                  d="@RegretLine()">

                </path>
            </svg>
        </div>
    </div>
    <br />
    <br />
    <h2>Rewards</h2>
    <table width="100%">
        <tr>
            @for (int i = 0; i < _dataSet.NormalizedRewards.Count(); i++)
            {
                int j = i;
                <td style="border:1px solid black;" width="auto">
                    <input @bind-value=_dataSet.NormalizedRewards[j] style="width:100%;" />
                </td>
            }
        </tr>
    </table>

    <h2>Internal Weights of Exp3</h2>
    <svg width="100vw" height="300">
        @for (int i = 0; i < _banditAlgorithm.K; i++)
        {
            <rect x="@(((i * 3 + 1) * 100.0 / (_banditAlgorithm.K * 3)).AsString())vw"
          y="0"
          width="@((100.0 / (_banditAlgorithm.K * 3)).AsString())vw"
          height="@((300.0 * _banditAlgorithm.Weights[i] / _banditAlgorithm.Weights.Max()).AsString())"
          fill="red">
            </rect>
            <text>
                <text x="5"
              y="-@(((i * 3 + 1) * 100.0 / (_banditAlgorithm.K * 3)).AsString())vw"
              fill="black"
              text-anchor="start"
              transform="rotate(90)">
                    @Math.Round(_banditAlgorithm.Weights[i], 7)
                </text>
            </text>
        }
    </svg>
}

@code {
    private int _k = 10;
    private double _gamma = 0.1;
    private int _chosenDataset = 0;

    private List<(string name, int id)> _datasets = new()
    {
        ("Static Dataset", 0),
        ("Mod2 for 1000 rounds Dataset", 1),
    };

    private IBanditAlgorithm _banditAlgorithm;
    private IDataSet _dataSet;

    private bool _iterating;
    private int _iterations;
    private double _accumRegret;

    private double _delay = 1;
    private double _accumDelay = 0;

    private List<(double iteration, double accumRegret)> _accumRegretHistory = new();

    private void Initialize()
    {
        _banditAlgorithm = new Exp3(_k, _gamma);
        _dataSet = _chosenDataset switch
        {
            0 => new StaticDataSet(Enumerable.Range(0, _k).Select(_ => Random.Shared.NextDouble()).OrderBy(x => x).ToArray()),
            _ => new Mod2DataSet(_k)
        };
    }

    private void Iterate()
    {
        var action = _banditAlgorithm.Choose();
        var (reward, regret) = _dataSet.Choose(action);
        _banditAlgorithm.GiveReward(action, reward);
        _accumRegret += regret;
        _accumRegretHistory.Add((_iterations, _accumRegret));
        _iterations++;
        StateHasChanged();
    }

    private async Task KeepIterating()
    {
        await Task.Run(async () =>
        {
            _iterating = true;
            while (_iterating)
            {
                if (_delay <= 0) _delay = 1;
                _accumDelay += _delay;
                if (_accumDelay >= 1)
                {
                    await Task.Delay((int)_accumDelay);
                    _accumDelay = _accumDelay % 1;
                }
                Iterate();
            }
        });
    }

    private string RegretLine()
    {
        if (_accumRegretHistory.Count > 2)
        {
            var maxRegret = _accumRegretHistory.Max(_ => _.accumRegret);
            return PathData(_accumRegretHistory.Select(t => (x: t.iteration / _accumRegretHistory.Count * 300.0, y: 200.0 - t.accumRegret / maxRegret * 200.0)).ToArray());
        }
        else
        {
            return "";
        }
    }

    private string PathData((double x, double y)[] Points)
    {
        // Parameter for smoothness of path in interval [0, 0.5]
        double smoothness = 1.0 / 3.0;

        var result = "";
        if (Points.Length >= 2)
        {
            result = $"M {Points[0].x.AsString()} {Points[0].y.AsString()} ";
            for (int i = 1; i < Points.Length - 1; i++)
            {
                result += $"S {(Points[i - 1].x * smoothness / 2 + Points[i].x - Points[i + 1].x * smoothness / 2).AsString()} {(Points[i - 1].y * smoothness / 2 + Points[i].y - Points[i + 1].y * smoothness / 2).AsString()} {Points[i].x.AsString()} {Points[i].y.AsString()} ";
            }
            result += $"S {(Points[^2].x * smoothness + Points[^1].x * (1 - smoothness)).AsString()} {(Points[^2].y * smoothness + Points[^1].y * (1 - smoothness)).AsString()} {Points[^1].x.AsString()} {Points[^1].y.AsString()} ";
        }
        return result;
    }
}